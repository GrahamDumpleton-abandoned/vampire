==========================
Getting mod_python Working
==========================

:Author: Graham Dumpleton
:Contact: grahamd@dscpl.com.au
:Updated: 06/02/2005

.. contents::


This article is intended to assist newbies to mod_python_ in trying to get
their first test program under mod_python to work. It goes beyond what is
provided in the mod_python documentation, attempting to describe common
problems that can arise.

Note that this article is not intended to describe how to install mod_python
itself. For instructions on installing mod_python, you should refer to the
"README" file provided with the source code and/or the online documentation
for such information.


Version Number
==============

Before you even get started, it is important to know exactly which version
of mod_python you are using. Having determined what version it is, make
sure that you are referring to the correct version of the mod_python
documentation. There are some subtle differences in configuring and using
the two main versions of mod_python which are available. Use the wrong
documentation and it most likely will not work. The appropriate
documentation is generally included with the mod_python source package or
can be found on the mod_python_ web site.

The two main major versions of mod_python are 2.7 and 3.1. Version 3.1
requires Apache 2.0, whereas version 2.7 can work on both Apache 1.3 or
2.0.

If mod_python has been installed, you can determine which version is being
used by executing "python" itself and attempting to import the module
"mod_python.psp". For example::

  ~ [510]$ python
  Python 2.3 (#1, Sep 13 2003, 00:49:11) 
  [GCC 3.3 20030304 (Apple Computer, Inc. build 1495)] on darwin
  Type "help", "copyright", "credits" or "license" for more information.
  >>> import mod_python.psp

If you see a Python exception of the form::

  ImportError: No module named _apache

it means that you have mod_python version 3.1. If you see the Python
exception::

  ImportError: No module named psp

it means that you only have version 2.7. Finally, if you instead see the
Python exception::

  ImportError: No module named mod_python.psp

it means that mod_python isn't installed after all, or at least not for the
version of Python you are trying to use.

You can also confirm which version of mod_python is being used by looking
in the Apache error log file for the mod_python startup message::

  [Tue Feb 01 16:08:21 2005] [notice] Apache/2.0.51 (Unix)
    mod_python/3.1.3 Python/2.3 configured -- resuming normal operations

If you do not see this message, then it can mean that Apache hasn't been
configured to load the mod_python module. To solve this, the installation
instructions will need to be followed to complete the installation. This
will entail adding to the Apache configuration file a line similar to::

  LoadModule python_module libexec/mod_python.so

The actual path to mod_python.so file may vary depending on your installation.

If the Apache configuration does contain this line, but you can't find the
mod_python startup message, make sure that Apache has actually been
restarted. This is necessary as Apache will only read this line when it is
being started.


Basic Content Handler
=====================

To perform an actual test of mod_python, first create an empty subdirectory
somewhere under your Apache document root directory. Do not simply use your
document root directory as it will be easier to isolate problems and
perform various tests if you use a subdirectory. By using a subdirectory,
you also lesson the risk that you will stop your web server from serving up
existing documents which you are hosting.

You will need to know what URL should be used to access this directory via
your web server. To test that the URL you expect to work, does in fact
work, create a file called "hello.txt" within that directory containing the
text "hello.txt". Now access the corresponding URL for this file using your
web browser to confirm that you can actually retrieve it.

If this doesn't work, make sure you are using the correct URL. Also ensure
that the directory is actually visible through the web server and that the
directory and the file contained within it are setup with appropriate
permissions such that the user which Apache runs as, can access them.

There are now two ways which you can configure Apache to enable use of
mod_python within this directory. The first is to make changes in the main
Apache configuration files. The second is to use a ".htaccess" file within
the actual directory. For this test we will initially use the ".htaccess"
file as doing so will mean that you will not have to keep restarting Apache
each time you make changes to the configuration.

Thus, create a ".htaccess" file in your subdirectory and place in it::

  AddHandler python-program .py
  PythonHandler mptest
  PythonDebug On

This syntax will work for both versions 2.7 and 3.1 of mod_python. In
version 3.1, the name of the mod_python handler reference has actually been
changed and thus it is now preferred to use "mod_python" instead of
"python-program". The old name though is still supported and will be used
here to avoid confusion for those using version 2.7.

In the same directory create a file called "mptest.py". In that file place::

  from mod_python import apache

  def handler(req):
      req.content_type = 'text/plain'
      req.send_http_header()
      req.write('mptest.py\n')
      return apache.OK

The call to "send_http_header()" is not actually required if version 3.1 of
mod_python is being used. If however you are using version 2.7 you should
always include this call if you set any of the HTTP response header fields,
such as that for content type.

Attempt to access this file using your browser. The last part of the URL
should specify "mptest.py". If everything is okay, you should see the
string "mptest.py" as the response.

If instead of the string "mptest.py" you see the actual source code
contained in the file, the main Apache configuration may not be enabled so
as to allow you to specify Apache handlers in a ".htaccess" file. To enable
this facility, edit your main Apache configuration file and add in an
appropriate location::

  <Directory /some/directory>
  AllowOverride FileInfo
  </Directory>

Replace "/some/directory" with the absolute pathname to the directory in
which the ".htaccess" file is located. You will need to restart Apache
before this configuration change takes affect.

If you see neither the correct result, or the source code, but instead the
response is a "500 Internal Server Error" response. It is likely that
mod_python hasn't been loaded by Apache.

If the response to the request lists a "Mod_python error" and supplies a
Python traceback, you have managed to make a coding error in the Python
code file. You can also receive a "500 Internal Server Error" response if
you did not enable the "PythonDebug" option in the configuration and such a
coding error existed.

If all is working okay at this point, go back and try again to access the
file "hello.txt". This should still work and is because the original
configuration specified that any request falling within the directory, as
long as it had a ".py" extension, is routed through the content handler
defined by "mptest.py". Requests against any other resource using a
different extension will be handled by Apache as they normally would.


Global Configuration
====================

To get things started, a ".htaccess" file residing in the same directory
as where the content handler was being placed was used. Doing this has
the benefits that if needing to make changes to the configuration, it is
not necessary to restart Apache as the ".htaccess" file is consulted
upon each request.

An additional benefit of using a ".htaccess" file is that it can travel
with your files and is under your control. This means you are at slightly
less risk of a mistake being made by someone else in the global Apache
configuration which changes or deletes your configuration, thus exposing
the content of your Python code files along with any other private
information.

Being able to use a ".htaccess" file, was however dependent on your
directory at least allowing overriding of "FileInfo" aspects of the
configuration. If however an Apache administrator will not allow this, you
will not have any choice but to have the ability to use mod_python in a
directory enabled in the global configuration.

To do this, the exact same configuration as was specified in the
".htaccess" file is used, except that it needs to be surrounded by a
"<Directory>" directive. The "<Directory>" directive should be applied
to the absolute path name to the directory which contain your files.
For example::

  <Directory /some/directory>
  AddHandler python-program .py
  PythonHandler mptest
  PythonDebug On
  </Directory>

Because this is in the global configuration, Apache will need to be
restarted after any change to it.


Apache Error Log
================

If having any difficulties with mod_python, it is always a good idea to
consult the Apache error log file. The log file is also useful for finding
information about Python modules that mod_python is loading.

When starting out with mod_python, the first thing you would want to look
for in the error log is evidence that mod_python is actually being loaded
by Apache. The startup message of mod_python takes the following form::

  [Tue Feb 01 16:08:21 2005] [notice] Apache/2.0.51 (Unix)
    mod_python/3.1.3 Python/2.3 configured -- resuming normal operations

The first time after a restart that a particular content handler needs to
be loaded, mod_python will output a message into the log file to indicate
this. The import message for the module containing the content handler will
be of the form::

  [Tue Feb 01 16:09:32 2005] [notice] mod_python: (Re)importing module 'mptest'

If at any time a content handler raises an unexpected exception for a
coding error or other problem, the details will also be recorded in the
Apache error log file. If the "PythonDebug" option is not enabled, this
will be the only place where the details of an exception in the Python code
will be able to be obtained from, as they will not be returned with a
response to the browser in that case.


Obtaining Assistance
====================

If after trying everything you are still unable to get even a basic
mod_python test handler working, your best course of action is to first
consult the `mod_python FAQ`_ and the archives of the `mod_python mailing
list`_. If you use the search box on the mod_python_ home page it will
search the mailing list archive as well as any other documentation on
the mod_python web site.

Failing that, you can subscribe to the mailing list and ask about the
problems you are having in that forum. When asking a question, make sure
you clearly explain what the problem is and include at least the following
information:

- Which version of mod_python and Apache you are using.

- Whether you are using the global configuration file or a .htaccess file.

- The snippet of the Apache configuration you are using to configure
  mod_python and enable its use in the directory you are working in.

- Details of any error responses which are being displayed by your web
  browser.

- Details of messages, be they notices or error messages, which occur
  in the Apache error log file corresponding to any request you are making
  which is not working.

- The full contents of the Python code file for the content handler you
  are trying to use.

The better the information you can provide, the quicker you are likely to
get a response. Given that you are seeing this because you have read this
document, also make sure you indicate how far you got in following this
procedure before things started not working.


.. _mod_python: http://www.modpython.org
.. _mod_python FAQ: http://www.modpython.org/FAQ/faqw.py
.. _mod_python mailing list: http://www.modpython.org/pipermail/mod_python
